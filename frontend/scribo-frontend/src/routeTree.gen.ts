/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DocumentsDocumentIdIndexRouteImport } from './routes/documents/$documentId/index'
import { Route as DocumentsDocumentIdSectionsSectionIdRouteImport } from './routes/documents/$documentId/sections/$sectionId'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DocumentsDocumentIdIndexRoute =
  DocumentsDocumentIdIndexRouteImport.update({
    id: '/documents/$documentId/',
    path: '/documents/$documentId/',
    getParentRoute: () => rootRouteImport,
  } as any)
const DocumentsDocumentIdSectionsSectionIdRoute =
  DocumentsDocumentIdSectionsSectionIdRouteImport.update({
    id: '/documents/$documentId/sections/$sectionId',
    path: '/documents/$documentId/sections/$sectionId',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/documents/$documentId': typeof DocumentsDocumentIdIndexRoute
  '/documents/$documentId/sections/$sectionId': typeof DocumentsDocumentIdSectionsSectionIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/documents/$documentId': typeof DocumentsDocumentIdIndexRoute
  '/documents/$documentId/sections/$sectionId': typeof DocumentsDocumentIdSectionsSectionIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/documents/$documentId/': typeof DocumentsDocumentIdIndexRoute
  '/documents/$documentId/sections/$sectionId': typeof DocumentsDocumentIdSectionsSectionIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/documents/$documentId'
    | '/documents/$documentId/sections/$sectionId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/documents/$documentId'
    | '/documents/$documentId/sections/$sectionId'
  id:
    | '__root__'
    | '/'
    | '/documents/$documentId/'
    | '/documents/$documentId/sections/$sectionId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DocumentsDocumentIdIndexRoute: typeof DocumentsDocumentIdIndexRoute
  DocumentsDocumentIdSectionsSectionIdRoute: typeof DocumentsDocumentIdSectionsSectionIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/documents/$documentId/': {
      id: '/documents/$documentId/'
      path: '/documents/$documentId'
      fullPath: '/documents/$documentId'
      preLoaderRoute: typeof DocumentsDocumentIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/documents/$documentId/sections/$sectionId': {
      id: '/documents/$documentId/sections/$sectionId'
      path: '/documents/$documentId/sections/$sectionId'
      fullPath: '/documents/$documentId/sections/$sectionId'
      preLoaderRoute: typeof DocumentsDocumentIdSectionsSectionIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DocumentsDocumentIdIndexRoute: DocumentsDocumentIdIndexRoute,
  DocumentsDocumentIdSectionsSectionIdRoute:
    DocumentsDocumentIdSectionsSectionIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
